package org.cocoaclojure.jna;
/**
 * This file was autogenerated by <a href="http://jnaerator.googlecode.com/">JNAerator</a>,<br>
 * a tool written by <a href="http://ochafik.free.fr/">Olivier Chafik</a> that <a href="http://code.google.com/p/jnaerator/wiki/CreditsAndLicense">uses a few opensource projects.</a>.<br>
 * For help, please visit <a href="http://nativelibs4java.googlecode.com/">NativeLibs4Java</a>, <a href="http://rococoa.dev.java.net/">Rococoa</a>, or <a href="http://jna.dev.java.net/">JNA</a>.
 */
public class objc_cache extends com.ochafik.lang.jnaerator.runtime.Structure<objc_cache, objc_cache.ByValue, objc_cache.ByReference> {
	/// total = mask + 1
	public int mask;
	public int occupied;
	public org.cocoaclojure.jna.objc_method.ByReference[] buckets = new org.cocoaclojure.jna.objc_method.ByReference[(1)];
	public objc_cache() {
		super();
	}
	public objc_cache(int mask, int occupied, org.cocoaclojure.jna.objc_method.ByReference buckets[]) {
		super();
		this.mask = mask;
		this.occupied = occupied;
		if (buckets.length != this.buckets.length) 
			throw new java.lang.IllegalArgumentException("Wrong array size !");
		this.buckets = buckets;
	}
	protected ByReference newByReference() { return new ByReference(); }
	protected ByValue newByValue() { return new ByValue(); }
	protected objc_cache newInstance() { return new objc_cache(); }
	public static objc_cache[] newArray(int arrayLength) {
		return com.ochafik.lang.jnaerator.runtime.Structure.newArray(objc_cache.class, arrayLength);
	}
	public static class ByReference extends objc_cache implements com.sun.jna.Structure.ByReference {}
	public static class ByValue extends objc_cache implements com.sun.jna.Structure.ByValue {}
}

package com.ochafik.lang.jnaerator.nativesupport.dllexport;
/**
 * <i>native declaration : C:\Prog\jnaerator\sources\com\ochafik\lang\jnaerator\nativesupport\dllexport.h</i><br>
 * This file was autogenerated by <a href="http://jnaerator.googlecode.com/">JNAerator</a>,<br>
 * a tool written by <a href="http://ochafik.free.fr/">Olivier Chafik</a> that <a href="http://code.google.com/p/jnaerator/wiki/CreditsAndLicense">uses a few opensource projects.</a>.<br>
 * For help, please visit <a href="http://nativelibs4java.googlecode.com/">NativeLibs4Java</a>, <a href="http://rococoa.dev.java.net/">Rococoa</a>, or <a href="http://jna.dev.java.net/">JNA</a>.
 */
public class IMAGE_NT_HEADERS extends com.ochafik.lang.jnaerator.runtime.Structure<IMAGE_NT_HEADERS, IMAGE_NT_HEADERS.ByValue, IMAGE_NT_HEADERS.ByReference> {
	public int Signature;
	public com.ochafik.lang.jnaerator.nativesupport.dllexport.IMAGE_FILE_HEADER FileHeader;
	public com.ochafik.lang.jnaerator.nativesupport.dllexport.IMAGE_OPTIONAL_HEADER OptionalHeader;
	public IMAGE_NT_HEADERS() {
		super();
	}
	public IMAGE_NT_HEADERS(int Signature, com.ochafik.lang.jnaerator.nativesupport.dllexport.IMAGE_FILE_HEADER FileHeader, com.ochafik.lang.jnaerator.nativesupport.dllexport.IMAGE_OPTIONAL_HEADER OptionalHeader) {
		super();
		this.Signature = Signature;
		this.FileHeader = FileHeader;
		this.OptionalHeader = OptionalHeader;
	}
	protected ByReference newByReference() { return new ByReference(); }
	protected ByValue newByValue() { return new ByValue(); }
	protected IMAGE_NT_HEADERS newInstance() { return new IMAGE_NT_HEADERS(); }
	public static class ByReference extends IMAGE_NT_HEADERS implements com.sun.jna.Structure.ByReference {}
	public static class ByValue extends IMAGE_NT_HEADERS implements com.sun.jna.Structure.ByValue {}
}
